from snakemake.utils import min_version
import pandas as pd
import numpy as np

min_version("8.0")


# read a table from the config file with the key "samples" and the file path to hifi data
print(config)

tbl = pd.read_csv(
    config["manifest"],
    sep="\\s+",
    index_col=0,
)

# make the references
references = config.get("references", {})
if not references:
    t2t = "/mmfs1/gscratch/stergachislab/assemblies/T2Tv2.0_maskedY.fa"
    if os.path.exists(t2t):
        references["T2T-CHM13v2.0"] = t2t
    hg38 = "/mmfs1/gscratch/stergachislab/assemblies/simple-names/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna"
    if os.path.exists(hg38):
        references["GRCh38"] = hg38
REFS = references


wildcard_constraints:
    sm="|".join(tbl.index),
    hap="|".join(["hap1", "hap2"]),
    asm_type="bp|dip",
    parental="pat|mat",
    read_type="hifi|mat|pat",
    ref="|".join(references.keys()),


include: "rules/common.smk"
include: "rules/asm.smk"


HAS_PARENTAL = {}
results = []
for row in tbl.itertuples():
    sm = row.Index
    if pd.isna(row.paternal) or pd.isna(row.maternal):
        asm_type = "bp"
        HAS_PARENTAL[sm] = False
    else:
        asm_type = "dip"
        HAS_PARENTAL[sm] = True
    print(f"Processing {sm} with assembly type {asm_type}")
    results += expand(
        rules.gfa_to_fa.output.fa,
        sm=sm,
        hap=["hap1", "hap2"],
        asm_type=asm_type,
    )


if REFS:
    for ref in references.keys():
        for sm in tbl.index:
            asm_type = "bp" if not HAS_PARENTAL[sm] else "dip"
            results += expand(
                rules.bam_to_paf.output.paf,
                sm=sm,
                hap=["hap1", "hap2"],
                asm_type=asm_type,
                ref=ref,
            )

print(f"Results: {results}")


rule all:
    input:
        results,
